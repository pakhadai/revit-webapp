#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Frontend
–ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É: python fix_frontend.py
"""

import os
import json

print("=" * 60)
print("üé® –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø FRONTEND –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á")
print("=" * 60)

# 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª app.js
print("\n1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è frontend/js/app.js:")

app_js_path = 'frontend/js/app.js'
if os.path.exists(app_js_path):
    with open(app_js_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π API URL
    if 'http://localhost:8001' in content:
        print("   ‚úÖ API URL –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π (http://localhost:8001)")
    else:
        # –ó–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        content = content.replace('http://localhost:8000', 'http://localhost:8001')
        content = content.replace('https://api.revitbot.com', 'http://localhost:8001')

        with open(app_js_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print("   ‚úÖ API URL –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ http://localhost:8001")
else:
    print("   ‚ùå –§–∞–π–ª frontend/js/app.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# 2. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend/js/config.js:")

config_js = """// Frontend Configuration
const CONFIG = {
    API_URL: 'http://localhost:8001',  // Backend API URL
    APP_NAME: 'RevitBot Store',
    VERSION: '1.0.0',

    // –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏
    DEV_MODE: true,

    // –ú–æ–≤–∏
    SUPPORTED_LANGUAGES: ['ua', 'en', 'ru', 'de', 'ar'],
    DEFAULT_LANGUAGE: 'ua',

    // Telegram
    TELEGRAM_BOT_USERNAME: 'revitbot',

    // Features
    FEATURES: {
        BONUSES: true,
        REFERRALS: true,
        PROMOTIONS: true,
        SUBSCRIPTION: true,
        VIP: true,
        RATINGS: true,
        COMMENTS: true
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CONFIG;
}
"""

config_path = 'frontend/js/config.js'
if not os.path.exists(config_path):
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config_js)
    print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª config.js")
else:
    print("   ‚úÖ config.js –≤–∂–µ —ñ—Å–Ω—É—î")

# 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Service Worker
print("\n3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è Service Worker:")

sw_path = 'frontend/service-worker.js'
if os.path.exists(sw_path):
    with open(sw_path, 'r', encoding='utf-8') as f:
        sw_content = f.read()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î favorites.js –≤ –∫–µ—à—ñ
    if "'/js/modules/favorites.js'" not in sw_content:
        print("   ‚ö†Ô∏è favorites.js –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ Service Worker cache")
    else:
        print("   ‚úÖ Service Worker –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
else:
    print("   ‚ùå Service Worker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# 4. –°—Ç–≤–æ—Ä—é—î–º–æ .env —Ñ–∞–π–ª —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
print("\n4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É:")

env_path = 'backend/.env'
if not os.path.exists(env_path):
    env_content = """# RevitBot Configuration

# Telegram Bot
BOT_TOKEN=your_bot_token_here
TELEGRAM_BOT_USERNAME=revitbot

# Admin Telegram IDs (comma separated)
ADMIN_TELEGRAM_IDS=123456789

# Database
DATABASE_URL=sqlite+aiosqlite:///./database/database.db

# Security
SECRET_KEY=your-secret-key-change-this-in-production

# Cryptomus Payment (optional)
CRYPTOMUS_MERCHANT_UUID=
CRYPTOMUS_API_KEY=
CRYPTOMUS_WEBHOOK_SECRET=

# App URL
APP_URL=http://localhost:8001

# Development
DEV_MODE=true
DEBUG=true
"""

    with open(env_path, 'w', encoding='utf-8') as f:
        f.write(env_content)
    print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–¥–∞—Ç–∏ BOT_TOKEN!)")
else:
    print("   ‚úÖ .env —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î")

# 5. –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –º–æ–¥—É–ª—å favorites.js
print("\n5. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥—É–ª—è favorites.js:")

favorites_path = 'frontend/js/modules/favorites.js'
if not os.path.exists(favorites_path):
    favorites_content = """// –ú–æ–¥—É–ª—å —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
window.FavoritesModule = {
    favorites: [],

    async init(app) {
        this.app = app;
        await this.loadFavorites();
    },

    async loadFavorites() {
        try {
            const response = await this.app.api.get('/api/favorites');
            this.favorites = response.items || [];
        } catch (error) {
            console.error('Failed to load favorites:', error);
            this.favorites = [];
        }
    },

    isFavorite(archiveId) {
        return this.favorites.some(f => f.archive_id === archiveId);
    },

    async toggle(archiveId) {
        try {
            if (this.isFavorite(archiveId)) {
                await this.app.api.delete(`/api/favorites/${archiveId}`);
                this.favorites = this.favorites.filter(f => f.archive_id !== archiveId);
                this.app.showToast('–í–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö', 'info');
            } else {
                await this.app.api.post('/api/favorites', { archive_id: archiveId });
                this.favorites.push({ archive_id: archiveId });
                this.app.showToast('–î–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ', 'success');
            }
            return true;
        } catch (error) {
            console.error('Failed to toggle favorite:', error);
            this.app.showToast('–ü–æ–º–∏–ª–∫–∞', 'error');
            return false;
        }
    },

    async getPage(app) {
        const t = (key) => app.t(key);
        const favorites = await app.api.get('/api/favorites');

        if (!favorites.items || favorites.items.length === 0) {
            return `
                <div class="favorites-page p-3" style="text-align: center; padding: 50px 20px;">
                    <div style="font-size: 80px; margin-bottom: 20px;">‚ù§Ô∏è</div>
                    <h3>–ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</h3>
                    <p style="color: var(--tg-theme-hint-color);">
                        –î–æ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ, —â–æ–± —à–≤–∏–¥–∫–æ —ó—Ö –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏
                    </p>
                    <button onclick="window.app.loadPage('catalog')" 
                            style="margin-top: 20px; padding: 12px 24px; background: var(--primary-color); color: white; border: none; border-radius: 8px;">
                        –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
                    </button>
                </div>
            `;
        }

        return `
            <div class="favorites-page p-3">
                <h2 style="margin-bottom: 20px;">‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏</h2>
                <div class="products-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)); gap: 15px;">
                    ${favorites.items.map(item => window.CatalogModule.getProductCard(item.archive, app)).join('')}
                </div>
            </div>
        `;
    }
};
"""

    with open(favorites_path, 'w', encoding='utf-8') as f:
        f.write(favorites_content)
    print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –º–æ–¥—É–ª—å favorites.js")
else:
    print("   ‚úÖ favorites.js –≤–∂–µ —ñ—Å–Ω—É—î")

print("\n" + "=" * 60)
print("‚úÖ FRONTEND –í–ò–ü–†–ê–í–õ–ï–ù–û!")
print("=" * 60)
print("\nüìù –©–æ –¥–∞–ª—ñ:")
print("1. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ backend/.env - –¥–æ–¥–∞–π—Ç–µ BOT_TOKEN")
print("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î: cd backend && python create_tables.py")
print("3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å backend: cd backend && uvicorn main:app --reload --port 8001")
print("4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å frontend: cd frontend && python -m http.server 8000")
print("5. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")