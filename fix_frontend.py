#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Frontend
–ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É: python fix_frontend.py
"""

import os
import json

print("=" * 60)
print("üé® –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø FRONTEND –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á")
print("=" * 60)

# 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª app.js
print("\n1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è frontend/js/app.js:")

app_js_path = 'frontend/js/app.js'
if os.path.exists(app_js_path):
    with open(app_js_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π API URL
    if 'http://localhost:8001' in content:
        print("   ‚úÖ API URL –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π (http://localhost:8001)")
    else:
        # –ó–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        content = content.replace('http://localhost:8000', 'http://localhost:8001')
        content = content.replace('https://api.revitbot.com', 'http://localhost:8001')

        with open(app_js_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print("   ‚úÖ API URL –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ http://localhost:8001")
else:
    print("   ‚ùå –§–∞–π–ª frontend/js/app.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# 2. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend/js/config.js:")

config_js = """// Frontend Configuration
const CONFIG = {
    API_URL: 'http://localhost:8001',  // Backend API URL
    APP_NAME: 'RevitBot Store',
    VERSION: '1.0.0',

    // –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏
    DEV_MODE: true,

    // –ú–æ–≤–∏
    SUPPORTED_LANGUAGES: ['ua', 'en', 'ru', 'de', 'ar'],
    DEFAULT_LANGUAGE: 'ua',

    // Telegram
    TELEGRAM_BOT_USERNAME: 'revitbot',

    // Features
    FEATURES: {
        BONUSES: true,
        REFERRALS: true,
        PROMOTIONS: true,
        SUBSCRIPTION: true,
        VIP: true,
        RATINGS: true,
        COMMENTS: true
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CONFIG;
}
"""

config_path = 'frontend/js/config.js'
if not os.path.exists(config_path):
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config_js)
    print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª config.js")
else:
    print("   ‚úÖ config.js –≤–∂–µ —ñ—Å–Ω—É—î")

# 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Service Worker
print("\n3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è frontend/service-worker.js:")

sw_path = 'frontend/service-worker.js'
if os.path.exists(sw_path):
    with open(sw_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ó–±—ñ–ª—å—à—É—î–º–æ –≤–µ—Ä—Å—ñ—é –∫–µ—à—É
    import re

    match = re.search(r"CACHE_NAME = 'revitbot-cache-v(\d+)'", content)
    if match:
        old_version = int(match.group(1))
        new_version = old_version + 1
        content = re.sub(
            r"CACHE_NAME = 'revitbot-cache-v\d+'",
            f"CACHE_NAME = 'revitbot-cache-v{new_version}'",
            content
        )

        with open(sw_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ Service Worker –æ–Ω–æ–≤–ª–µ–Ω–æ (v{old_version} -> v{new_version})")
    else:
        print("   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é Service Worker")
else:
    print("   ‚ùå Service Worker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# 4. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π HTML –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
print("\n4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:")

test_html = """<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RevitBot Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .test-block {
            background: white;
            padding: 20px;
            margin: 10px 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .status { font-weight: bold; }
        .success { color: green; }
        .error { color: red; }
        button {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background: #2481cc;
            color: white;
            cursor: pointer;
        }
        button:hover { background: #1a5fa0; }
    </style>
</head>
<body>
    <h1>ü§ñ RevitBot Test Page</h1>

    <div class="test-block">
        <h2>1. API Connection Test</h2>
        <button onclick="testAPI()">Test API</button>
        <div id="api-result"></div>
    </div>

    <div class="test-block">
        <h2>2. Auth Test</h2>
        <button onclick="testAuth()">Test Auth</button>
        <div id="auth-result"></div>
    </div>

    <div class="test-block">
        <h2>3. Archives Test</h2>
        <button onclick="testArchives()">Test Archives</button>
        <div id="archives-result"></div>
    </div>

    <script>
        const API_URL = 'http://localhost:8001';

        async function testAPI() {
            const resultDiv = document.getElementById('api-result');
            try {
                const response = await fetch(API_URL + '/');
                const data = await response.json();
                resultDiv.innerHTML = '<span class="status success">‚úÖ API –ø—Ä–∞—Ü—é—î!</span><br>' + 
                                     JSON.stringify(data, null, 2);
            } catch (error) {
                resultDiv.innerHTML = '<span class="status error">‚ùå API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π</span><br>' + error;
            }
        }

        async function testAuth() {
            const resultDiv = document.getElementById('auth-result');
            try {
                const response = await fetch(API_URL + '/api/auth/telegram', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({initData: 'dev_mode=true'})
                });
                const data = await response.json();
                resultDiv.innerHTML = '<span class="status success">‚úÖ Auth –ø—Ä–∞—Ü—é—î!</span><br>' + 
                                     JSON.stringify(data, null, 2);
                if (data.token) {
                    localStorage.setItem('test_token', data.token);
                }
            } catch (error) {
                resultDiv.innerHTML = '<span class="status error">‚ùå Auth –ø–æ–º–∏–ª–∫–∞</span><br>' + error;
            }
        }

        async function testArchives() {
            const resultDiv = document.getElementById('archives-result');
            try {
                const response = await fetch(API_URL + '/api/archives/list');
                const data = await response.json();
                resultDiv.innerHTML = '<span class="status success">‚úÖ Archives –ø—Ä–∞—Ü—é—î!</span><br>' + 
                                     '–ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ö—ñ–≤—ñ–≤: ' + (data.archives?.length || 0);
            } catch (error) {
                resultDiv.innerHTML = '<span class="status error">‚ùå Archives –ø–æ–º–∏–ª–∫–∞</span><br>' + error;
            }
        }
    </script>
</body>
</html>"""

test_path = 'frontend/test.html'
with open(test_path, 'w', encoding='utf-8') as f:
    f.write(test_html)
print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É: {test_path}")

print("\n" + "=" * 60)
print("üìã –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
print("=" * 60)
print("""
1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Backend —Å–µ—Ä–≤–µ—Ä:
   cd backend && uvicorn main:app --reload --port 8001

2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Frontend —Å–µ—Ä–≤–µ—Ä:
   cd frontend && python -m http.server 8000

3. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:
   - –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫: http://localhost:8000
   - –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: http://localhost:8000/test.html

4. –ù–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
   - Test API - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
   - Test Auth - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   - Test Archives - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤
""")