#!/usr/bin/env python3
"""
–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä—ñ–≤: python test_all.py
"""

import requests
import json
import time

BASE_URL = "http://localhost:8001"
FRONTEND_URL = "http://localhost:8000"


def test_endpoint(name, method, url, data=None, headers=None):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–¥–∏–Ω –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=5)
        elif method == "POST":
            response = requests.post(url, json=data, headers=headers, timeout=5)
        else:
            return f"‚ùì {name}: –ù–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥ {method}"

        if response.status_code in [200, 201]:
            return f"‚úÖ {name}: OK ({response.status_code})"
        elif response.status_code == 401:
            return f"üîê {name}: –ü–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–ø—Ä–∞—Ü—é—î)"
        elif response.status_code == 404:
            return f"‚ùå {name}: Not Found (404)"
        else:
            return f"‚ö†Ô∏è {name}: Status {response.status_code}"
    except requests.exceptions.ConnectionError:
        return f"‚ùå {name}: –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    except Exception as e:
        return f"‚ùå {name}: {str(e)}"


print("=" * 60)
print("üß™ –§–Ü–ù–ê–õ–¨–ù–ò–ô –¢–ï–°–¢ –í–°–Ü–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í")
print("=" * 60)

# –¢–µ—Å—Ç Backend
print("\nüì° BACKEND –¢–ï–°–¢–ò:")
print("-" * 40)

backend_tests = [
    ("API Status", "GET", f"{BASE_URL}/"),
    ("API Docs", "GET", f"{BASE_URL}/docs"),
    ("Auth", "POST", f"{BASE_URL}/api/auth/telegram", {"initData": "dev_mode=true"}),
    ("Archives List", "GET", f"{BASE_URL}/api/archives/list"),
    ("Promo Codes", "GET", f"{BASE_URL}/api/promo-codes/"),
    ("Admin", "GET", f"{BASE_URL}/api/admin/stats"),
    ("Subscriptions", "GET", f"{BASE_URL}/api/subscriptions/plans"),
    ("Bonuses", "GET", f"{BASE_URL}/api/bonuses/balance"),
]

token = None
for test in backend_tests:
    result = test_endpoint(*test)
    print(result)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω —è–∫—â–æ auth —É—Å–ø—ñ—à–Ω–∏–π
    if test[0] == "Auth" and "‚úÖ" in result:
        try:
            response = requests.post(test[2], json=test[3])
            data = response.json()
            if "token" in data:
                token = data["token"]
                print(f"   üìù Token –æ—Ç—Ä–∏–º–∞–Ω–æ: {token[:20]}...")
        except:
            pass

# –¢–µ—Å—Ç Frontend
print("\nüåê FRONTEND –¢–ï–°–¢–ò:")
print("-" * 40)

frontend_tests = [
    ("Homepage", "GET", f"{FRONTEND_URL}/"),
    ("Test Page", "GET", f"{FRONTEND_URL}/test.html"),
    ("Manifest", "GET", f"{FRONTEND_URL}/manifest.json"),
    ("Service Worker", "GET", f"{FRONTEND_URL}/service-worker.js"),
    ("Main CSS", "GET", f"{FRONTEND_URL}/css/main.css"),
    ("App JS", "GET", f"{FRONTEND_URL}/js/app.js"),
]

for test in frontend_tests:
    result = test_endpoint(*test)
    print(result)

# –¢–µ—Å—Ç –∑ —Ç–æ–∫–µ–Ω–æ–º
if token:
    print("\nüîë –¢–ï–°–¢–ò –ó –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ñ–Æ:")
    print("-" * 40)

    auth_headers = {"Authorization": f"Bearer {token}"}

    auth_tests = [
        ("User Profile", "GET", f"{BASE_URL}/api/auth/me", None, auth_headers),
        ("User Bonuses", "GET", f"{BASE_URL}/api/bonuses/balance", None, auth_headers),
        ("User Orders", "GET", f"{BASE_URL}/api/orders/my", None, auth_headers),
        ("Favorites", "GET", f"{BASE_URL}/api/favorites/list", None, auth_headers),
        ("Notifications", "GET", f"{BASE_URL}/api/notifications/unread", None, auth_headers),
    ]

    for test in auth_tests:
        result = test_endpoint(*test)
        print(result)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î
print("\nüíæ –ë–ê–ó–ê –î–ê–ù–ò–•:")
print("-" * 40)

try:
    import sqlite3

    conn = sqlite3.connect('backend/database/database.db')
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()

    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
    for table in tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table[0]}")
        count = cursor.fetchone()[0]
        print(f"   - {table[0]}: {count} –∑–∞–ø–∏—Å—ñ–≤")

    conn.close()
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ë–î: {e}")

# –§—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
print("\n" + "=" * 60)
print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
print("=" * 60)

print("""
–Ø–∫—â–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø–æ–∫–∞–∑—É—é—Ç—å ‚úÖ –∞–±–æ üîê - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!

–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è:
- ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π -> –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä
- ‚ùå Not Found -> –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ—É—Ç–∏–Ω–≥ –≤ main.py
- ‚ö†Ô∏è Status 500 -> –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
- üîê –ü–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó -> –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤

–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ Telegram:
1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ @BotFather
2. –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
3. /setmenubutton -> –≤–≤–µ–¥—ñ—Ç—å http://localhost:8000
4. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞ —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
""")

print("=" * 60)