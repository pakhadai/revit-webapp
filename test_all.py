# test_all.py - –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø

import requests
import json
import time

BASE_URL = "http://localhost:8001"
FRONTEND_URL = "http://localhost:8000"


def test_endpoint(name, method, url, data=None, headers=None):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–¥–∏–Ω –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=5)
        elif method == "POST":
            response = requests.post(url, json=data, headers=headers, timeout=5)
        else:
            return f"‚ùì {name}: –ù–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥ {method}"

        if response.status_code in [200, 201]:
            return f"‚úÖ {name}: OK ({response.status_code})"
        elif response.status_code == 401:
            return f"üîê {name}: –ü–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–ø—Ä–∞—Ü—é—î)"
        elif response.status_code == 403:
             return f"‚õîÔ∏è {name}: –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (–ø—Ä–∞—Ü—é—î)"
        elif response.status_code == 404:
            return f"‚ùå {name}: Not Found (404)"
        elif response.status_code == 405:
            return f"‚ùå {name}: Method Not Allowed (405)"
        else:
            return f"‚ö†Ô∏è {name}: Status {response.status_code} - {response.text[:100]}"
    except requests.exceptions.ConnectionError:
        return f"‚ùå {name}: –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    except Exception as e:
        return f"‚ùå {name}: {str(e)}"


print("=" * 60)
print("üß™ –û–ù–û–í–õ–ï–ù–ò–ô –¢–ï–°–¢ –í–°–Ü–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í")
print("=" * 60)

# –¢–µ—Å—Ç Backend
print("\nüì° BACKEND –¢–ï–°–¢–ò (–ü—É–±–ª—ñ—á–Ω—ñ):")
print("-" * 40)

backend_tests = [
    ("API Status", "GET", f"{BASE_URL}/"),
    ("API Docs", "GET", f"{BASE_URL}/docs"),
    ("Auth", "POST", f"{BASE_URL}/api/auth/telegram", {"initData": "dev_mode=true"}),
    ("Archives List", "GET", f"{BASE_URL}/api/archives/paginated/list"),
]

token = None
for test in backend_tests:
    result = test_endpoint(*test)
    print(result)
    if test[0] == "Auth" and "‚úÖ" in result:
        try:
            response = requests.post(test[2], json=test[3])
            data = response.json()
            if "token" in data:
                token = data["token"]
                print(f"   üìù Token –æ—Ç—Ä–∏–º–∞–Ω–æ: {token[:20]}...")
        except:
            pass

# –¢–µ—Å—Ç Frontend
print("\nüåê FRONTEND –¢–ï–°–¢–ò:")
print("-" * 40)
frontend_tests = [
    ("Homepage", "GET", f"{FRONTEND_URL}/"),
    ("Test Page", "GET", f"{FRONTEND_URL}/test.html"),
    ("Manifest", "GET", f"{FRONTEND_URL}/manifest.json"),
    ("Service Worker", "GET", f"{FRONTEND_URL}/service-worker.js"),
    ("App JS", "GET", f"{FRONTEND_URL}/js/app.js"),
]
for test in frontend_tests:
    print(test_endpoint(*test))


# –¢–µ—Å—Ç –∑ —Ç–æ–∫–µ–Ω–æ–º
if token:
    print("\nüîë –¢–ï–°–¢–ò –ó –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ñ–Æ:")
    print("-" * 40)
    auth_headers = {"Authorization": f"Bearer {token}"}
    auth_tests = [
        ("My Profile (Auth)", "GET", f"{BASE_URL}/api/auth/me", None, auth_headers),
        ("Daily Bonus Status", "GET", f"{BASE_URL}/api/bonuses/daily-bonus", None, auth_headers),
        ("My Orders", "GET", f"{BASE_URL}/api/orders/check-bonus-limit", None, auth_headers), # Placeholder, needs a real endpoint
        ("Favorites List", "GET", f"{BASE_URL}/api/favorites/", None, auth_headers),
        ("Notifications", "GET", f"{BASE_URL}/api/notifications/", None, auth_headers),
        ("Admin Dashboard", "GET", f"{BASE_URL}/api/admin/dashboard", None, auth_headers),
    ]
    for test in auth_tests:
        print(test_endpoint(*test))
else:
    print("\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω, —Ç–µ—Å—Ç–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é –ø—Ä–æ–ø—É—â–µ–Ω–æ.")

print("\n" + "=" * 60)
print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏—â–µ.")
print("=" * 60)