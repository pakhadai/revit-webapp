#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ weekly_specials –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ backend
backend_path = Path(__file__).parent / 'backend'
sys.path.insert(0, str(backend_path))

from sqlalchemy import text
from database import engine, Base
from models import User, Archive  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –º–æ–¥–µ–ª—ñ

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É –º–æ–¥–µ–ª—å
from models.weekly_special import WeeklySpecial


async def create_weekly_special_table():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é weekly_specials —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î"""

    print("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ weekly_specials...")

    async with engine.begin() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–∞–±–ª–∏—Ü—è –≤–∂–µ —ñ—Å–Ω—É—î
        result = await conn.execute(
            text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='weekly_specials'
            """)
        )

        if result.scalar():
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è weekly_specials –≤–∂–µ —ñ—Å–Ω—É—î")
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        await conn.execute(text("""
            CREATE TABLE weekly_specials (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                archive_id INTEGER NOT NULL,
                discount_percent INTEGER NOT NULL,
                discount_price REAL NOT NULL,
                start_date DATETIME NOT NULL,
                end_date DATETIME NOT NULL,
                bonus_multiplier REAL DEFAULT 1.0,
                is_active BOOLEAN DEFAULT 1,
                views_count INTEGER DEFAULT 0,
                clicks_count INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_by INTEGER,
                marketing_text TEXT,
                badge_text VARCHAR DEFAULT 'MEGA SALE',
                FOREIGN KEY (archive_id) REFERENCES archives(id),
                FOREIGN KEY (created_by) REFERENCES users(id)
            )
        """))

        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
        await conn.execute(text("""
            CREATE INDEX idx_weekly_specials_active 
            ON weekly_specials(is_active, start_date, end_date)
        """))

        await conn.execute(text("""
            CREATE INDEX idx_weekly_specials_archive 
            ON weekly_specials(archive_id)
        """))

        print("‚úÖ –¢–∞–±–ª–∏—Ü—è weekly_specials —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return True


async def add_sample_weekly_special():
    """–î–æ–¥–∞—î –ø—Ä–∏–∫–ª–∞–¥ –°—ñ–º–µ–π—Å—Ç–≤–∞ —Ç–∏–∂–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""

    from datetime import datetime, timedelta
    import pytz

    KYIV_TZ = pytz.timezone('Europe/Kiev')

    async with engine.begin() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞—Ä—Ö—ñ–≤–∏
        result = await conn.execute(
            text("SELECT id, title, price FROM archives LIMIT 1")
        )
        archive = result.first()

        if not archive:
            print("‚ö†Ô∏è  –ù–µ–º–∞—î –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –°—ñ–º–µ–π—Å—Ç–≤–∞ —Ç–∏–∂–Ω—è")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è
        result = await conn.execute(
            text("SELECT id FROM weekly_specials WHERE is_active = 1")
        )

        if result.scalar():
            print("‚ÑπÔ∏è  –í–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è
        now = datetime.now(KYIV_TZ)
        end_date = now + timedelta(days=7)
        discount_percent = 40
        discount_price = round(float(archive.price) * 0.6, 2)

        await conn.execute(
            text("""
                INSERT INTO weekly_specials 
                (archive_id, discount_percent, discount_price, 
                 start_date, end_date, bonus_multiplier, is_active,
                 marketing_text, badge_text)
                VALUES 
                (:archive_id, :discount_percent, :discount_price,
                 :start_date, :end_date, :bonus_multiplier, 1,
                 :marketing_text, :badge_text)
            """),
            {
                "archive_id": archive.id,
                "discount_percent": discount_percent,
                "discount_price": discount_price,
                "start_date": now.isoformat(),
                "end_date": end_date.isoformat(),
                "bonus_multiplier": 1.5,
                "marketing_text": f"–¢—ñ–ª—å–∫–∏ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è! {archive.title} –∑—ñ –∑–Ω–∏–∂–∫–æ—é {discount_percent}%",
                "badge_text": f"-{discount_percent}%"
            }
        )

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è: {archive.title} –∑—ñ –∑–Ω–∏–∂–∫–æ—é {discount_percent}%")


async def update_archive_relationship():
    """–û–Ω–æ–≤–ª—é—î –º–æ–¥–µ–ª—å Archive –¥–ª—è –∑–≤'—è–∑–∫—É –∑ WeeklySpecial"""

    print("\nüìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Archive:")
    print("-" * 50)
    print("–î–æ–¥–∞–π—Ç–µ –≤ —Ñ–∞–π–ª backend/models/archive.py:")
    print("\n1. –ù–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É (—è–∫—â–æ —â–µ –Ω–µ–º–∞—î):")
    print("   from sqlalchemy.orm import relationship")
    print("\n2. –í –∫–ª–∞—Å Archive –¥–æ–¥–∞–π—Ç–µ:")
    print("   weekly_specials = relationship('WeeklySpecial', back_populates='archive')")
    print("-" * 50)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""

    print("\n" + "=" * 60)
    print("üöÄ –ú–Ü–ì–†–ê–¶–Ü–Ø –ë–ê–ó–ò –î–ê–ù–ò–• - –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è")
    print("=" * 60)

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        created = await create_weekly_special_table()

        if created:
            # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞
            await add_sample_weekly_special()

        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        await update_archive_relationship()

        print("\n‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print("\n–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ backend: cd backend && uvicorn main:app --reload --port 8001")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
        print("3. –í –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–µ –°—ñ–º–µ–π—Å—Ç–≤–æ —Ç–∏–∂–Ω—è")

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ backend –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)