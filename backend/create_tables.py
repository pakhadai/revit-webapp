#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
–ó–∞–ø—É—Å—Ç—ñ—Ç—å –≤ –ø–∞–ø—Ü—ñ backend: python create_tables.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ —à–ª—è—Ö
sys.path.insert(0, str(Path(__file__).parent))


async def create_all_tables():
    print("=" * 60)
    print("üì¶ –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–¨ –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("=" * 60)

    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        from database import Base, engine
        print("‚úÖ Database engine —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")

        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –í–°–Ü –º–æ–¥–µ–ª—ñ - —Ü–µ –í–ê–ñ–õ–ò–í–û!
        from models.user import User
        from models.archive import Archive, ArchivePurchase
        from models.order import Order, OrderItem
        from models.payment import Payment
        from models.subscription import Subscription, SubscriptionArchive
        from models.bonus import BonusTransaction, DailyBonus, UserReferral, VipLevel
        from models.favorite import Favorite
        from models.view_history import ViewHistory
        from models.archive_rating import ArchiveRating
        from models.notification import Notification
        from models.comment import Comment
        from models.promo_code import PromoCode
        from models.marketplace import (
            DeveloperApplication, DeveloperProfile,
            MarketplaceProduct, MarketplaceTransaction,
            DeveloperWithdrawal, ProductReview, DeveloperAnalytics
        )

        print("‚úÖ –í—Å—ñ –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)

        print("‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ
        from sqlalchemy import inspect
        async with engine.connect() as conn:
            def check_tables(connection):
                inspector = inspect(connection)
                tables = inspector.get_table_names()
                return tables

            tables = await conn.run_sync(check_tables)

        print(f"\nüìã –°—Ç–≤–æ—Ä–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü—å:")
        for table in sorted(tables):
            print(f"   - {table}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = asyncio.run(create_all_tables())

    if success:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        print("–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä:")
        print("   uvicorn main:app --reload --port 8001")
    else:
        print("\n‚ùå –í–∏–Ω–∏–∫–ª–∏ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")